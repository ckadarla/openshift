apiVersion: v1
data:
  Dockerfile: |
    # base defines a base stage that uses the official python runtime base image
    FROM python:3.11-slim AS base

    # Add curl for healthcheck
    RUN apt-get update && \
        apt-get install -y --no-install-recommends curl && \
        rm -rf /var/lib/apt/lists/*

    # Set the application directory
    WORKDIR /usr/local/app

    # Install our requirements.txt
    COPY requirements.txt ./requirements.txt
    RUN pip install --no-cache-dir -r requirements.txt

    # dev defines a stage for development, where it'll watch for filesystem changes
    FROM base AS dev
    RUN pip install watchdog
    ENV FLASK_ENV=development
    CMD ["python", "app.py"]

    # final defines the stage that will bundle the application for production
    FROM base AS final

    # Copy our code from the current folder to the working directory inside the container
    COPY . .

    # Make port 80 available for links and/or publish
    EXPOSE 80

    # Define our command to be run when launching the container
    CMD ["gunicorn", "app:app", "-b", "0.0.0.0:80", "--log-file", "-", "--access-logfile", "-", "--workers", "4", "--keep-alive", "0"]
  app.py: |
    from flask import Flask, render_template, request, make_response, g
    from redis import Redis
    import os
    import socket
    import random
    import json
    import logging

    option_a = os.getenv('OPTION_A', "Cats")
    option_b = os.getenv('OPTION_B', "Dogs")
    hostname = socket.gethostname()

    app = Flask(__name__)

    gunicorn_error_logger = logging.getLogger('gunicorn.error')
    app.logger.handlers.extend(gunicorn_error_logger.handlers)
    app.logger.setLevel(logging.INFO)

    def get_redis():
        if not hasattr(g, 'redis'):
            g.redis = Redis(host="redis", db=0, socket_timeout=5)
        return g.redis

    @app.route("/", methods=['POST','GET'])
    def hello():
        voter_id = request.cookies.get('voter_id')
        if not voter_id:
            voter_id = hex(random.getrandbits(64))[2:-1]

        vote = None

        if request.method == 'POST':
            redis = get_redis()
            vote = request.form['vote']
            app.logger.info('Received vote for %s', vote)
            data = json.dumps({'voter_id': voter_id, 'vote': vote})
            redis.rpush('votes', data)

        resp = make_response(render_template(
            'index.html',
            option_a=option_a,
            option_b=option_b,
            hostname=hostname,
            vote=vote,
        ))
        resp.set_cookie('voter_id', voter_id)
        return resp


    if __name__ == "__main__":
        app.run(host='0.0.0.0', port=80, debug=True, threaded=True)
  requirements.txt: |
    Flask
    Redis
    gunicorn
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: vote
  name: vote-cm0
